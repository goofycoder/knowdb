=======================================================
Translation lookaside buffer (TLB)
    - a cache that memory management hardware uses to improve virtual address translation speed.
    - All current desktop, laptop, and server processors include one or more TLBs in the memory management hardware
    - it is nearly always present in any hardware that utilizes paged or segmented virtual memory.
    - The operation of more common TLB implementations is using hash tables

=========================================================
memory locking: mlockall()

Memory locking has two main applications: real-time algorithms and high-security data processing.  

Real-time applications require deterministic timing, and, like scheduling, paging is 
one major cause of unexpected program execution delays.  
Real-time applications will usually also switch to a real-time scheduler with sched_setscheduler(2).  

Cryptographic security software often handles critical bytes like passwords or secret keys as data structures.  
As a result of paging, these secrets could be transferred onto a persistent swap store medium, 
where they might be accessible to the enemy long after the security software has erased the 
secrets in RAM and terminated.  (But be aware that the suspend mode on laptops and some desktop 
computers will save a copy of the system's RAM to disk, regardless of memory locks.)

Real-time processes that are using mlockall() to prevent delays on page faults should 
reserve enough locked stack pages before entering the time-critical section, so that 
no page fault can be caused by function calls.  This can be achieved by calling a function 
that allocates a sufficiently large automatic variable (an array) and writes to the memory 
occupied by this array in order to touch these stack pages.  
This way, enough pages will be mapped for the stack and can be locked into RAM.  
The dummy writes ensure that not even copy-on-write page faults can occur in the critical section.


========================================================
Q: Is memcpy() thread-safe?
A: No, memcpy is typically made for speed. If you need thread-safe memcpy(), put it in the critical section guarded by mutex.
    lock(&mutex);
    memcpy(dst, src, count);
    unlock(&mutex);
