HTTP cookie (also known as web cookie, browser cookie) 
    - small piece of data sent from a website  
    - stored in a user's web browser while the user is browsing that website. 
    - Every time user loads the website, browser sends cookie back to webserver to notify user's previous activity.
    - Cookies were designed to be a reliable mechanism for websites to remember stateful information 
      (such as items in a shopping cart) or to record the user's browsing activity 
    - cookie content 
        * (including clicking particular buttons, logging in, or recording which pages were visited by 
           the user as far back as months or years ago).    

Cookie's security concern
    - cookies cannot carry viruses
    - cookies cannot install malware on the host computer,
    - tracking cookies and especially third-party tracking cookies are commonly used as ways to 
      compile long-term records of individuals' browsing histories
    - Cookies can also store passwords and forms a user has previously entered, such as an address. 

How Cookie works:
    - When a user accesses a website with a cookie function for the first time, a cookie is sent from server 
      to the browser and stored with the browser in the local computer. 
    - Later when that user goes back to the same website, the website will recognize the user because of 
      the stored cookie with the user's information.

TCP (Transmission Control Program)
    - TCP provides reliable, ordered, error-checked delivery of a stream of octets between programs 
      running on computers on network. 
    - TCP resides at the transport layer
      * provide a communication service at an intermediate level between application program and IP layer
    - when an application program desires to send a large chunk of data across the Internet using IP, 
      instead of breaking the data into IP-sized pieces and issuing a series of IP requests, the software 
      can issue a single request to TCP and let TCP handle the IP details.
    - Once the TCP receiver has reassembled the sequence of octets originally transmitted
        - it passes them to the receiving application. 
        - TCP abstracts the application's communication from the underlying networking details.

The use of TCP
    - Web browsers use TCP when they connect to servers on the World Wide Web, 
    - used to deliver email and transfer files from one location to another.

Life time of HTTPS request
    - User clicks a link or enters the URL directly into the browser's address bar.
    - Browser resolves server's host name.
        * DNS lookup
    - Browser sends the request over HTTPS to the server.
    - HTTP server (such as apache, Nginx) gets the request and terminates HTTPS/SPDY.
        * front end server received request on port 443
    - Handle HTTP caching: (such as Varnish) as Web application accelerator
        * If the requested document/content is already in the cache, it is immediately returned
          otherwise the request is passed further.
    - Load balancing the traffic (such as HAProxy)
        * HAproxy uses round robin scheme to select a backend to use.
        * HAProxy does periodic health checks and automatically removes dead backends from the pool.
    - Backend server, upon receiving the request, invokes the application allowing it to handle it. 
    - Application prepares a response.
    - Response goes through web server and through back all the stacks 
       (such as HAProxy, Varnish and Nginx) back to the browser.
    
HTTP server error handling (example)

Q: What happens when all application servers are dead?
A: After marking all backends as unavailable, Load balancer return "503 Service Unavailable error code" to front-end server that will show maintenance page to users. 

Q: What happens in the case of a traffic spike, when there are more incoming connections than available end points?
A: Connections will wait in a queue until backends can handle them. If a request stays in queue longer than 2 minutes it will be dropped. The client will get 504 Gateway Timeout HTTP error code.

Q: What happens when the application doesn't respond in time?
A: We have a hard 50 seconds limit on backend reply, so if the application doesn't respond in that time, 
front end server sends back 504 Gateway Timeout to the client.

Q: What happens when a front end server fails?
A: Failover (active standby). In addition to all front end processes (Nginx, Varnish and HAProxy) being monitored locally, we have a failover mechanism through a floating IP that switches to a backup front end server. 
The backup server is always on stand by and ready to immediately process requests. 
Any active and incoming connections made between time of the failure and failover switch will be lost.
    
