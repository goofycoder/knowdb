SSL handshake
  1.Server (but not Client) is authenticated by its certificate:
    *** Negotiation phase:
      - Client --> Server: sends a ClientHello message specifying 
            * the highest TLS protocol version it supports
            * a random number
            * a list of suggested CipherSuites 
            * suggested compression methods. 
            * If the client is attempting to perform a resumed handshake, it may send a session ID.
      - Server --> Client: responds with a ServerHello message specifying:
            * chosen protocol version
                - the highest that both the client and server support
            * a random number
            * CipherSuite
            * compression method from the choices offered by the client. 
            * Seeion ID (optional): to confirm or allow resumed handshakes 
      - Server --> Client: Send server's Certificate message (OPTIONAL: depending on the selected cipher suite)
      - Server --> Client: Send a ServerHelloDone message
            * indicating it is done with handshake negotiation.
      - Client --> Server: responds with a ClientKeyExchange message containing:
            * may contain a PreMasterSecret, public key, or nothing. 
                (Depends on the selected cipher.) 
            * PreMasterSecret is encrypted using the public key of the server certificate.
      - Client and Server:
            * use the random numbers and PreMasterSecret to compute a common secret, called the "master secret". 
            * All other key data for this connection is derived from this master secret 
      - Client -The client now sends a ChangeCipherSpec record, essentially telling the server, "Everything I tell you from now on will be authenticated 
            (and encrypted if encryption parameters were present in the server certificate)." 
            The ChangeCipherSpec is itself a record-level protocol with content type of 20.
      - Client --> Server:  sends an authenticated and encrypted Finished message, containing 
            * a hash and MAC over the previous handshake messages.
            * Server will attempt to decrypt the client's Finished message and verify the hash and MAC. 
      - Finally, the server sends a ChangeCipherSpec, telling the client:
            * "Everything I tell you from now on will be authenticated (and encrypted, if encryption was negotiated)."
      - The server sends its authenticated and encrypted Finished message.
        The client performs the same decryption and verification.
    *** Application phase: 
        - "handshake" is complete and the application protocol is enabled, with content type of 23. 
        - Application messages exchanged between client and server will also be authenticated and optionally encrypted exactly like in Finished message. 
        - Otherwise, the content type will return 25 and the client will not authenticate.


IPSec
  - a protocol suite for securing IP communications by authenticating and encrypting each IP packet of communication session. 
  - can be used in protecting data flows between 
      * a pair of hosts (host-to-host)
      * a pair of security gateways (network-to-network)
      * a security gateway and a host (network-to-host)
  - IKE daemon: runs in user space 
    IPsec stack: in the kernel that processes the actual IP packets.

IPsec protocol suite 
  - IPsec uses the following protocols to perform various functions:
    * Authentication Headers (AH): [protocol number 51] 
      - provide connectionless integrity and data origin authentication for IP datagrams 
      - provide protection against replay attacks
        * sliding window
    * Encapsulating Security Payloads (ESP):  [protocol number 50]
      - provide:
        * confidentiality
        * data-origin authentication
        * connectionless integrity
        * anti-replay service (a form of partial sequence integrity)
        * limited traffic-flow confidentiality
    * Security Associations (SA) 
      - provide the bundle of algorithms and data that provide the parameters necessary to AH and/or ESP operations. 
      - Internet Security Association and Key Management Protocol (ISAKMP) provides 
          * a framework for authentication and key exchange,
          * with actual authenticated keying material provided by 
            - manual configuration with pre-shared keys
            - Internet Key Exchange (IKE and IKEv2)
            - Kerberized Internet Negotiation of Keys (KINK)

Internet Key Exchange (IKE or IKEv2) 
  - the protocol used to set up a security association (SA) in the IPsec protocol suite
  - use UDP packets [usually on port 500]
  - generally requires 4-6 packets with 2-3 turn-around times to create an SA on both sides. 
  - Negotiated key material is then given to the IPsec stack.

security association (SA)
  - Simply the bundle of algorithms and parameters (such as keys)
  - used to encrypt and authenticate a particular flow in one direction. 
  - in normal bi-directional traffic, the flows are secured by a pair of SAs

IPSec mode
  - host-to-host transport mode
      * Only the payload of the IP packet is usually encrypted and/or authenticated. 
      * Routing is intact, since the IP header is neither modified nor encrypted; 
  - network tunnel mode
      * entire IP packet is encrypted and/or authenticated. 
      * then encapsulated into a new IP packet with a new IP header. 
 
Hypertext Transfer Protocol Secure (HTTPS) 
  - a communications protocol for secure communication over a computer network
  - not a protocol in and of itself; simply layering HTTP on top of the SSL/TLS protocol
      * add the security capabilities of SSL/TLS to standard HTTP communications.



Two-factor authentication (2FA)
  - a way of logging into websites that requires more than just a password. Using a password to log into a website is susceptible to security threats, because it represents a single piece of information a malicious person needs to acquire. 
  - The added security that 2FA provides is requiring additional information to log in.
  - Example: GitHub login
      * additional information is a code delivered to your cell phone
          - either as a text message or generated by an application on smartphone. 
          - GitHub generates a security code that is sent to phone any time someone attempts to log into GitHub account.
          
