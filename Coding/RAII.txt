Resource Acquisition Is Initialization (RAII)
    - a programming idiom used in several object-oriented languages like C++. 
    - The technique was invented by Bjarne Stroustrup to deal with resource allocation and deallocation in C++. 
    - In this language, if an exception is thrown, and proper exception handling is in place, the only code that will be executed for the current scope are the destructors of objects 
      declared in that scope. 
    - Resource management therefore needs to be tied to the lifespan of suitable objects in order to gain automatic allocation and reclamation. 
    - Resources are acquired during initialization, when there is no chance of them being used before they are available, and released with the destruction of the same objects
        * which is guaranteed to take place even in case of errors.
 
Advantage of RAII
    - Using RAII 
        * simplifies resource management
        * reduces overall code size
        * helps ensure program correctness. 
    - RAII is therefore highly recommended in C++
  
** RAII is vital in writing exception-safe C++ code
    - Its release resources before permitting exceptions to propagate (in order to avoid resource leaks) 
    - one can write appropriate destructors once rather than dispersing and duplicating cleanup logic between exception handling blocks that may or may not be executed.

Summary of RAII use cases
    1. control mutex locks in multi-threaded applications
    2. interaction with files
    3. ownership of dynamically allocated objects


*** Use Case #1 ***
  The RAII technique is often used for controlling mutex locks in multi-threaded applications. 
    - The object releases the lock when destroyed. 
    - Without RAII in this scenario the potential for deadlock would be high and the logic to lock the mutex would be far from the logic to unlock it. 
    - With RAII, the code that locks the mutex essentially includes the logic that the lock will be released when the RAII object goes out of scope.

*** Use case #2 ***     
  Example: interacting with files: We could have an object that represents a file that is open for writing
    * wherein the file is opened in the constructor and closed when the object goes out of scope. 
  In both cases, RAII ensures only that the resource in question is released appropriately
    * care must still be taken to maintain exception safety. 
  If the code modifying the data structure or file is not exception-safe
    * the mutex could be unlocked or the file closed with the data structure or file corrupted.

*** Use Case #3 ***
    * Ownership of dynamically allocated objects (memory allocated with new in C++) can also be controlled with RAII
        - such that the object is released when the RAII object is destroyed. 
    * For this purpose, the C++11 standard library defines the smart pointer classes:
        - std::unique_ptr for single-owned objects 
        - std::shared_ptr for objects with shared ownership. 
        Similar classes are also available through std::auto_ptr in C++98, and boost::shared_ptr in the Boost libraries.
        
Stack unwinding:
    - C++ guarantees that all stack objects are destroyed at the end of the enclosing scope
    - The destructors of both the lock and file objects are therefore guaranteed to be called when returning from the function, whether an exception has been thrown or not.
